services:
  backend:
    build: ./backend
    container_name: sanmarinoapp-backend
    ports:
      - "5050:5050" # Puerto expuesto para la API .NET
    networks:
      - red-local
    depends_on:
      - db
 # levantamos el frontend
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=db;Port=5432;Username=admin;Password=admin123;Database=zoo
      - ASPNETCORE_URLS=http://+:5050
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
      - ASPNETCORE_Kestrel__Certificates__Default__Password=admin123
      - ASPNETCORE_Kestrel__Endpoints__Http__Url=http://+:5050
      - ASPNETCORE_Kestrel__Endpoints__Https__Url=https://+:443
  frontend:
    build: ./frontend
    container_name: sanmarinoapp-frontend
    ports:
      - "4200:80" # Puerto donde se sirve Angular con NGINX
    networks:
      - red-local
    depends_on:
      - backend
    environment:
      - NGINX_HOST=localhost
      - NGINX_PORT=80

  db:
    image: postgres:15
    container_name: sanmarinoapp-db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: zoo
    ports:
      - "5432:5432" # Puerto para conectar desde pgAdmin o el backend
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    # Montamos el script de inicialización
    # para que se ejecute al iniciar el contenedor
    # y se creen las tablas necesarias
    # para la aplicación
    # y se inserten los datos iniciales
    # en la base de datos
    networks:
      - red-local

volumes:
  pgdata:

networks:
  red-local:
    driver: bridge
