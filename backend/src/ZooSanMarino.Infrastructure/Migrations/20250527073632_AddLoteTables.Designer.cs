// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ZooSanMarino.Infrastructure.Persistence;

#nullable disable

namespace ZooSanMarino.Infrastructure.Migrations
{
    [DbContext(typeof(ZooSanMarinoContext))]
    [Migration("20250527073632_AddLoteTables")]
    partial class AddLoteTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("document_type");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_updated")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("text")
                        .HasColumnName("modified_by");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Nit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nit");

                    b.HasKey("Id")
                        .HasName("pk_companies");

                    b.ToTable("companies", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Farm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("company_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("RegionalId")
                        .HasColumnType("integer")
                        .HasColumnName("regional_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<int>("ZoneId")
                        .HasColumnType("integer")
                        .HasColumnName("zone_id");

                    b.HasKey("Id")
                        .HasName("pk_farms");

                    b.HasIndex("CompanyId")
                        .HasDatabaseName("ix_farms_company_id");

                    b.ToTable("farms", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Galpon", b =>
                {
                    b.Property<string>("GalponId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("galpon_id");

                    b.Property<string>("GalponNucleoId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("galpon_nucleo_id");

                    b.Property<int>("GranjaId")
                        .HasColumnType("integer")
                        .HasColumnName("granja_id");

                    b.HasKey("GalponId")
                        .HasName("pk_galpones");

                    b.HasIndex("GranjaId")
                        .HasDatabaseName("ix_galpones_granja_id");

                    b.HasIndex("GalponNucleoId", "GranjaId")
                        .HasDatabaseName("ix_galpones_galpon_nucleo_id_granja_id");

                    b.ToTable("galpones", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Lote", b =>
                {
                    b.Property<string>("LoteId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lote_id");

                    b.Property<string>("Fase")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fase");

                    b.Property<DateTime?>("FechaLlegada")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_llegada");

                    b.Property<int>("GranjaId")
                        .HasColumnType("integer")
                        .HasColumnName("granja_id");

                    b.Property<string>("LoteNombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("lote_nombre");

                    b.Property<int?>("TotalAvesHembra")
                        .HasColumnType("integer")
                        .HasColumnName("total_aves_hembra");

                    b.Property<int?>("TotalAvesMacho")
                        .HasColumnType("integer")
                        .HasColumnName("total_aves_macho");

                    b.HasKey("LoteId")
                        .HasName("pk_lotes");

                    b.HasIndex("GranjaId")
                        .HasDatabaseName("ix_lotes_granja_id");

                    b.ToTable("lotes", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.LoteGalpon", b =>
                {
                    b.Property<string>("LoteId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lote_id");

                    b.Property<string>("ReproductoraId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("reproductora_id");

                    b.Property<string>("GalponId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("galpon_id");

                    b.Property<int?>("H")
                        .HasColumnType("integer")
                        .HasColumnName("hembra");

                    b.Property<int?>("M")
                        .HasColumnType("integer")
                        .HasColumnName("macho");

                    b.HasKey("LoteId", "ReproductoraId", "GalponId")
                        .HasName("pk_lote_galpones");

                    b.HasIndex("GalponId")
                        .HasDatabaseName("ix_lote_galpones_galpon_id");

                    b.ToTable("lote_galpones", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.LoteReproductora", b =>
                {
                    b.Property<string>("LoteId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lote_id");

                    b.Property<string>("ReproductoraId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("reproductora_id");

                    b.Property<DateTime?>("FechaEncasetamiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_encasetamiento");

                    b.Property<int?>("H")
                        .HasColumnType("integer")
                        .HasColumnName("hembra");

                    b.Property<int?>("M")
                        .HasColumnType("integer")
                        .HasColumnName("macho");

                    b.Property<string>("NombreLote")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("nombre_lote");

                    b.HasKey("LoteId", "ReproductoraId")
                        .HasName("pk_lote_reproductoras");

                    b.ToTable("lote_reproductoras", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Nucleo", b =>
                {
                    b.Property<string>("NucleoId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nucleo_id");

                    b.Property<int>("GranjaId")
                        .HasColumnType("integer")
                        .HasColumnName("granja_id");

                    b.Property<string>("NucleoNombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nucleo_nombre");

                    b.HasKey("NucleoId", "GranjaId")
                        .HasName("pk_nucleos");

                    b.HasIndex("GranjaId")
                        .HasDatabaseName("ix_nucleos_granja_id");

                    b.ToTable("nucleos", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Farm", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Company", "Company")
                        .WithMany("Farms")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_farms_companies_company_id");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Galpon", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Farm", "Farm")
                        .WithMany()
                        .HasForeignKey("GranjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_galpones_farms_granja_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.Nucleo", "Nucleo")
                        .WithMany("Galpones")
                        .HasForeignKey("GalponNucleoId", "GranjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_galpones_nucleos_galpon_nucleo_id_granja_id");

                    b.Navigation("Farm");

                    b.Navigation("Nucleo");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Lote", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Farm", "Farm")
                        .WithMany("Lotes")
                        .HasForeignKey("GranjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lotes_farms_granja_id");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.LoteGalpon", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Galpon", "Galpon")
                        .WithMany()
                        .HasForeignKey("GalponId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_lote_galpones_galpones_galpon_id");

                    b.HasOne("ZooSanMarino.Domain.Entities.LoteReproductora", "LoteReproductora")
                        .WithMany("LoteGalpones")
                        .HasForeignKey("LoteId", "ReproductoraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lote_galpones_lote_reproductoras_lote_id_reproductora_id");

                    b.Navigation("Galpon");

                    b.Navigation("LoteReproductora");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.LoteReproductora", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Lote", "Lote")
                        .WithMany("Reproductoras")
                        .HasForeignKey("LoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lote_reproductoras_lotes_lote_id");

                    b.Navigation("Lote");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Nucleo", b =>
                {
                    b.HasOne("ZooSanMarino.Domain.Entities.Farm", "Farm")
                        .WithMany("Nucleos")
                        .HasForeignKey("GranjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_nucleos_farms_granja_id");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Company", b =>
                {
                    b.Navigation("Farms");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Farm", b =>
                {
                    b.Navigation("Lotes");

                    b.Navigation("Nucleos");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Lote", b =>
                {
                    b.Navigation("Reproductoras");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.LoteReproductora", b =>
                {
                    b.Navigation("LoteGalpones");
                });

            modelBuilder.Entity("ZooSanMarino.Domain.Entities.Nucleo", b =>
                {
                    b.Navigation("Galpones");
                });
#pragma warning restore 612, 618
        }
    }
}
